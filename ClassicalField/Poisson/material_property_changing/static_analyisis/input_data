CONTROL_TIME_LOOP=>CONTROL_LOOP
            CALL CONTROL_LOOP_CURRENT_TIMES_GET(CONTROL_TIME_LOOP,CURRENT_TIME,TIME_INCREMENT,ERR,ERROR,*999)
            SOLVER_EQUATIONS=>SOLVER%SOLVER_EQUATIONS
            IF(ASSOCIATED(SOLVER_EQUATIONS)) THEN
              SOLVER_MAPPING=>SOLVER_EQUATIONS%SOLVER_MAPPING
              EQUATIONS=>SOLVER_MAPPING%EQUATIONS_SET_TO_SOLVER_MAP(1)%EQUATIONS
              IF(ASSOCIATED(EQUATIONS)) THEN
                EQUATIONS_SET=>EQUATIONS%EQUATIONS_SET
                IF(ASSOCIATED(EQUATIONS_SET)) THEN 
                  DEPENDENT_FIELD=>EQUATIONS_SET%DEPENDENT%DEPENDENT_FIELD    
                  IF(ASSOCIATED(DEPENDENT_FIELD)) THEN                
                    !Read in field values to dependent field)
                    NULLIFY(dependentFieldVariable)
                    DEPENDENT_FIELD=>EQUATIONS_SET%DEPENDENT%DEPENDENT_FIELD
                    CALL FIELD_VARIABLE_GET(DEPENDENT_FIELD,FIELD_U_VARIABLE_TYPE,dependentFieldVariable,ERR,ERROR,*999)
                    CALL BOUNDARY_CONDITIONS_VARIABLE_GET(SOLVER_EQUATIONS%BOUNDARY_CONDITIONS, &
                      & dependentFieldVariable,BOUNDARY_CONDITIONS_VARIABLE,ERR,ERROR,*999)
                    !Read in field data from file
                    !Loop over nodes and update Neumann boundary condition
                    IF(ASSOCIATED(DEPENDENT_FIELD)) THEN
                      ! Get the nodes on this computational domain
                      IF(dependentFieldVariable%COMPONENTS(1)%INTERPOLATION_TYPE== &
                        & FIELD_NODE_BASED_INTERPOLATION) THEN
                        domain=>dependentFieldVariable%COMPONENTS(1)%DOMAIN
                        IF(ASSOCIATED(domain)) THEN
                          IF(ASSOCIATED(domain%TOPOLOGY)) THEN
                            DOMAIN_NODES=>domain%TOPOLOGY%NODES
                            IF(ASSOCIATED(DOMAIN_NODES)) THEN
                              numberOfNodes = DOMAIN_NODES%NUMBER_OF_NODES
                              numberOfGlobalNodes = DOMAIN_NODES%NUMBER_OF_GLOBAL_NODES
                            ELSE
                              CALL FLAG_ERROR("Domain topology nodes is not associated.",ERR,ERROR,*999)
                            ENDIF
                          ELSE
                            CALL FLAG_ERROR("Domain topology is not associated.",ERR,ERROR,*999)
                          ENDIF
                        ELSE
                          CALL FLAG_ERROR("Domain is not associated.",ERR,ERROR,*999)
                        ENDIF
                      ELSE
                        CALL FLAG_ERROR("Only node based interpolation is implemented.",ERR,ERROR,*999)
                      ENDIF
                      CALL FIELD_NUMBER_OF_COMPONENTS_GET(EQUATIONS_SET%GEOMETRY%GEOMETRIC_FIELD,FIELD_U_VARIABLE_TYPE, &
                        &  NUMBER_OF_DIMENSIONS,ERR,ERROR,*999)
                      ! Construct the filename based on the computational node and time step
                      currentLoopIteration=CONTROL_LOOP%TIME_LOOP%ITERATION_NUMBER
                      WRITE(tempString,"(I4.4)") currentLoopIteration
                      inputFile = './interpolatedData/fitData' // tempString(1:4) // '.dat'

                      INQUIRE(FILE=inputFile, EXIST=importDataFromFile)
                      IF(importDataFromFile) THEN
                        !Read fitted data from input file (if exists)
                        CALL WRITE_STRING(GENERAL_OUTPUT_TYPE,"Updating independent field and boundary nodes from "//inputFile, &
                          & ERR,ERROR,*999)
                        ALLOCATE(nodeData(numberOfGlobalNodes,NUMBER_OF_DIMENSIONS))
                        OPEN(UNIT=10, FILE=inputFile, STATUS='OLD')                  
                        DO nodeIdx=1,numberOfGlobalNodes
                          READ(10,*) (nodeData(nodeIdx,componentIdx), componentIdx=1, NUMBER_OF_DIMENSIONS)
                        ENDDO !nodeIdx
                        !Loop over local nodes and update dependent field boundary condition
                        DO nodeIdx=1,numberOfNodes
                          userNodeNumber=DOMAIN_NODES%NODES(nodeIdx)%USER_NUMBER
                          CALL DOMAIN_TOPOLOGY_NODE_CHECK_EXISTS(domain%Topology,userNodeNumber,nodeExists,localNodeNumber, &
                            & ghostNode,err,error,*999)
                          IF(nodeExists .AND. .NOT. ghostNode) THEN
                            DO componentIdx=1,NUMBER_OF_DIMENSIONS
                              dependentDof = dependentFieldVariable%COMPONENTS(componentIdx)%PARAM_TO_DOF_MAP%NODE_PARAM2DOF_MAP% &
                                & NODES(nodeIdx)%DERIVATIVES(1)%VERSIONS(1)
                              VALUE = nodeData(userNodeNumber,componentIdx)
                              CALL FIELD_COMPONENT_DOF_GET_USER_NODE(DEPENDENT_FIELD,dependentVariableType,1,1,userNodeNumber, & 
                                & componentIdx,localDof,globalDof,err,error,*999)
                              BOUNDARY_CONDITION_CHECK_VARIABLE=BOUNDARY_CONDITIONS_VARIABLE%CONDITION_TYPES(globalDof)
                              IF(BOUNDARY_CONDITION_CHECK_VARIABLE==BOUNDARY_CONDITION_FixedFitted) THEN
                                CALL FIELD_PARAMETER_SET_UPDATE_LOCAL_DOF(DEPENDENT_FIELD,dependentVariableType, &
                                  & FIELD_VALUES_SET_TYPE,localDof,VALUE,ERR,ERROR,*999)
                              ENDIF
                            ENDDO !componentIdx
                          ENDIF ! ghost/exist check
                        ENDDO !nodeIdx
                        DEALLOCATE(nodeData)
                      ENDIF !check import file exists
                    ELSE
                      CALL FLAG_ERROR("Equations set dependent field is not associated.",ERR,ERROR,*999)
                    ENDIF !dependent filed
                  ENDIF !Equations set dependent
                ENDIF !Equations set
              ENDIF !Equaton
            ENDIF !Solvers
